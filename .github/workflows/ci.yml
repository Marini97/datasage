name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with ruff
      run: |
        ruff check datasage/
    
    - name: Format check with black
      run: |
        black --check datasage/
    
    - name: Type check with mypy
      run: |
        mypy datasage/
      continue-on-error: true  # Don't fail CI on type errors yet
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --tb=short
      env:
        # Disable model downloads during testing
        HF_DATASETS_OFFLINE: 1
        TRANSFORMERS_OFFLINE: 1
    
    - name: Test CLI smoke test
      run: |
        # Test that CLI can be imported and shows help
        python -m datasage.cli --help
    
    - name: Upload coverage reports
      if: matrix.python-version == '3.10'
      run: |
        pip install coverage pytest-cov
        pytest tests/ --cov=datasage --cov-report=xml
      continue-on-error: true

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: Install DataSage
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test CLI installation
      run: |
        datasage version
        datasage info
    
    - name: Test sample data profiling (mocked)
      run: |
        # Create a simple test to verify the pipeline works
        python -c "
        import sys
        sys.path.insert(0, '.')
        from datasage.profiler import profile_df
        import pandas as pd
        
        # Test basic profiling without LLM
        df = pd.DataFrame({'a': [1,2,3], 'b': ['x','y','z']})
        profile = profile_df(df)
        assert profile['dataset']['n_rows'] == 3
        assert profile['dataset']['n_cols'] == 2
        print('âœ“ Basic profiling test passed')
        "

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security tools
      run: |
        python -m pip install bandit safety
    
    - name: Security check with bandit
      run: |
        bandit -r datasage/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Dependency security check with safety
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
